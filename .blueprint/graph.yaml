nodes:
  UserInput:
    label: "User UI & Input (Svelte SPA)"
    main_file: src/lib/components/App.svelte
    helper_files:
      - src/lib/components/app/Editor/Editors.svelte
      - src/lib/components/app/LLMChat/ChatShell.svelte
      - src/lib/components/app/Editor/PlanEditor.svelte
      - src/lib/components/app/Editor/ArchitectEditor.svelte
      - src/lib/components/app/Editor/DevelopEditor.svelte
    comment: |
      Provides the main user interface for project planning, architecting, and coding. Hosts all editors and chat-based agent controls. Collects input, displays current plan and architecture, and maintains app-level state.

  PlanAgent:
    label: "Plan Agent (LLM planner logic, chat, tools)"
    main_file: src/lib/state/allAgents.svelte.ts
    helper_files:
      - src/lib/llm/BPAgent/BPAgent.ts
      - src/lib/llm/systemPrompts.ts
      - src/lib/llm/Tool/ToolMap.ts
    comment: |
      Handles the user prompts and LLM-driven planning phase. Reads/writes the plan.md, proposes project changes or improvements, and mediates between user needs and architectural design, leveraging tool APIs.

  ArchitectAgent:
    label: "Architect Agent (LLM architect logic, chat, tools)"
    main_file: src/lib/state/allAgents.svelte.ts
    helper_files:
      - src/lib/llm/BPAgent/BPAgent.ts
      - src/lib/llm/systemPrompts.ts
      - src/lib/llm/Tool/ToolMap.ts
    comment: |
      Drives the translation of plan.md into graph.yaml, offering architecture suggestions, explicit node/edge declarations, and reviewing architectural consistency. Uses tool APIs to propose or accept architecture contracts.

  CodeAgents:
    label: "Code Agents (Node/Edge Generator, per-node and global)"
    main_file: src/lib/state/allAgents.svelte.ts
    helper_files:
      - src/lib/llm/BPAgent/BPAgent.ts
      - src/lib/llm/Tool/ToolMap.ts
      - src/lib/llm/systemPrompts.ts
    comment: |
      Responsible for scaffolding, generating, and testing node and edge code according to the architecture in graph.yaml. One agent per node plus one for 'All Edges'. Uses code, terminal, and test tool APIs. Writes to /src/nodes, /src/edges as required.

  TauriBackend:
    label: "Tauri Rust Backend (File IO, Watchers, System Integration)"
    main_file: src-tauri/src/lib.rs
    helper_files:
      - src-tauri/src/read_file_tools.rs
      - src-tauri/src/write_file_tools.rs
      - src-tauri/src/watcher.rs
      - src-tauri/src/schema_watcher.rs
    comment: |
      Rust backend for project file operations, directory listings, file watching, process/command execution, and deep integration hooks. Powers the filesystem and system tool interfaces consumed by the Svelte app and agents.

edges:
  UI_to_Plan:
    label: "User Input & Plan/MD Flow"
    kind: descriptive
    source: UserInput
    target: PlanAgent
    doc: docs/interface-contract-dd.md#UI_to_Plan
    example_call: |
      // Svelte
      planAgent.applyPlanInput(editorState.planMD)
    description: |
      UI invokes planning LLM agent logic, passes markdown to agent via shared Svelte state and filesystem interface. Communication is by in-memory state and file IO, not a formal interface contract.
    comment: |
      Edge connects UI actions/events to the agent logic for planning, using conventions and documentation.

  Plan_to_Architect:
    label: "Plan Review & Graph Proposal"
    kind: descriptive
    source: PlanAgent
    target: ArchitectAgent
    doc: docs/interface-contract-dd.md#Plan_to_Architect
    description: |
      Plan agent and architect agent share state, files, and control logic. They use shared stores and agent state, not strongly enforced API/code stubs.
    comment: |
      Architect agent receives plan handoff and proposes/edits the graph structure per documentation and project conventions.

  Architect_to_Code:
    label: "Architecture/Graph to Code Agent"
    kind: descriptive
    source: ArchitectAgent
    target: CodeAgents
    description: |
      Architect agent calls into code agents through shared agent state, editor triggers, and project files (YAML, plan, etc). No enforced stubs: all integration is through JS imports/state and user events.
    comment: |
      Executes the phase where proposed graph (graph.yaml) is used as source for codegen/test work by code agents.

  UI_to_Code:
    label: "User UI & Per-node Code/Generate Controls"
    kind: descriptive
    source: UserInput
    target: CodeAgents
    description: |
      UI triggers (buttons, actions in Svelte) invoke code agent logic for scaffolding, tests, or code generation. Interaction is by calling agent functions from shared state; no stub/interface here.
    example_call: |
      getDeveloperAgentForNode(nodeId).send("scaffold")
    comment: |
      Used so user (via UI) can request actions from code agents directly.

  CodeAgent_to_FS:
    label: "Code/Agent-Driven File IO (Tauri API)"
    kind: descriptive
    source: CodeAgents
    target: TauriBackend
    doc: docs/interface-contract-dd.md#File_IO
    description: |
      File IO is handled by invoking Rust-side Tauri commands and system APIs directly from Svelte. Calls are coordinated but not via generated schemas. See code in src/lib/llm/Tool/ToolMap.ts and src-tauri/src/.
    comment: |
      All project source/output happens using the Rust backend as an integration glue.

  UI_to_Backend:
    label: "UI-to-Tauri Commands/Events"
    kind: descriptive
    source: UserInput
    target: TauriBackend
    description: |
      Direct UI requests for project root, app updates, or system-level events are routed to the backend using tauri.invoke and event subscriptions.
    comment: |
      This covers direct system events, not mediated by agent loop, e.g. update checks, window events.
