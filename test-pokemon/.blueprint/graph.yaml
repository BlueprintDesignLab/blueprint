nodes:
  GameEngine:
    label: "Phaser Game Engine Core"
    main_file: src/GameEngine.ts
    helper_files:
      - src/OverworldScene.ts
      - src/BattleScene.ts
      - src/PartyScreen.ts
      - src/Creature.ts
      - src/MapData.ts
    comment: |
      Main entry point for the game. Handles Phaser initialization, scene switching, and core game loop. Delegates to scene modules for overworld, battle, and party management. All user input and rendering is managed here, but UI logic is now factored out to a dedicated node for modularity.

  UI:
    label: "UI & User Input Layer"
    main_file: src/UI.ts
    helper_files:
      - src/PartyScreen.ts
      - src/BattleUI.ts
      - src/NotificationUI.ts
    comment: |
      Handles all user interface rendering (menus, party/collection, battle UI, notifications) and user input abstraction. Communicates with GameEngine to update state and receive events. Modularizes UI logic for easier testing and future expansion.

  Persistence:
    label: "LocalStorage Persistence Manager"
    main_file: src/Persistence.ts
    helper_files: []
    comment: |
      Handles saving and loading of game state (player position, party, progress) to and from browser localStorage. Provides a simple API for the GameEngine to persist and restore state.

  AssetLoader:
    label: "Asset Loader"
    main_file: src/AssetLoader.ts
    helper_files: []
    comment: |
      Loads and manages all game assets (tilemaps, sprites, placeholder pixel art). Ensures assets are available before scenes are started. Used by GameEngine during boot.

  TestHarness:
    label: "Manual & Automated Test Harness"
    main_file: src/TestHarness.ts
    helper_files: []
    comment: |
      Provides utilities for manual playtesting and (optionally) automated tests for core logic. Can be run in development mode to validate user journeys and game state transitions.

  DataContracts:
    label: "Shared Data Contracts (Creature, Party, Map)"
    main_file: src/DataContracts.ts
    helper_files: []
    comment: |
      Defines TypeScript types and (optionally) JSON Schemas for shared data structures: Creature, Party, MapData. Used by GameEngine, UI, and Persistence for type safety and future cross-language compatibility.

edges:
  game_state_persistence:
    label: "Game State ↔ Persistence API"
    interfaceFile: src/edges/interfaces/GameStatePersistence.ts
    source: GameEngine
    target: Persistence
    comment: |
      TypeScript interface for saving/loading game state. GameEngine calls Persistence to persist or restore player, party, and progress data. No cross-language boundary.

  asset_loading:
    label: "Asset Loading API"
    interfaceFile: src/edges/interfaces/AssetLoading.ts
    source: GameEngine
    target: AssetLoader
    comment: |
      TypeScript interface for requesting and retrieving assets (tilemaps, sprites). GameEngine requests assets from AssetLoader during initialization and scene transitions.

  test_harness_integration:
    label: "Test Harness ↔ GameEngine API"
    interfaceFile: src/edges/interfaces/TestHarnessAPI.ts
    source: TestHarness
    target: GameEngine
    comment: |
      TypeScript interface for test harness to control or observe GameEngine state. Used for manual playtesting and (optionally) automated test scenarios.

  ui_game_engine:
    label: "UI ↔ GameEngine Event & Command API"
    interfaceFile: src/edges/interfaces/UIGameEngineAPI.ts
    source: UI
    target: GameEngine
    comment: |
      TypeScript interface for UI to send user actions (move, select, menu, battle commands) to GameEngine, and for GameEngine to emit state/events to UI. Clean separation for testability and future UI refactors.

  ui_data_contracts:
    label: "UI ↔ DataContracts (Type Imports)"
    interfaceFile: src/edges/interfaces/UIDataContracts.ts
    source: UI
    target: DataContracts
    comment: |
      TypeScript interface (or type import) for UI to use shared data types (Creature, Party, MapData) defined in DataContracts. Ensures UI and GameEngine use consistent data structures.

  game_engine_data_contracts:
    label: "GameEngine ↔ DataContracts (Type Imports)"
    interfaceFile: src/edges/interfaces/GameEngineDataContracts.ts
    source: GameEngine
    target: DataContracts
    comment: |
      TypeScript interface (or type import) for GameEngine to use shared data types (Creature, Party, MapData) defined in DataContracts. Ensures all logic uses consistent data structures.

  persistence_data_contracts:
    label: "Persistence ↔ DataContracts (Type Imports)"
    interfaceFile: src/edges/interfaces/PersistenceDataContracts.ts
    source: Persistence
    target: DataContracts
    comment: |
      TypeScript interface (or type import) for Persistence to use shared data types (Creature, Party, MapData) defined in DataContracts. Ensures save/load logic is type-safe and future-proof.

# All edges are intra-process TypeScript interfaces for now. If future cross-language or serialization is needed, JSON Schemas can be added to DataContracts and referenced here.